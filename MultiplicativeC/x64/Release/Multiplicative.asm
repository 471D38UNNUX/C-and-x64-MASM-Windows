; Listing generated by Microsoft (R) Optimizing Compiler Version 19.42.34435.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	K
PUBLIC	j
PUBLIC	modfff
PUBLIC	t
PUBLIC	J
PUBLIC	modfis
PUBLIC	AH
PUBLIC	R
PUBLIC	s
PUBLIC	modtf
PUBLIC	AA
PUBLIC	q
PUBLIC	AC
PUBLIC	e
PUBLIC	Aj
PUBLIC	y
PUBLIC	AF
PUBLIC	modfi
PUBLIC	i
PUBLIC	Ag
PUBLIC	line
PUBLIC	modti
PUBLIC	p
PUBLIC	h
PUBLIC	k
PUBLIC	V
PUBLIC	P
PUBLIC	divlls
PUBLIC	Ac
PUBLIC	mullls
PUBLIC	Ai
PUBLIC	U
PUBLIC	avx2
PUBLIC	z
PUBLIC	divds
PUBLIC	o
PUBLIC	I
PUBLIC	Ab
PUBLIC	f
PUBLIC	Ah
PUBLIC	modfds
PUBLIC	Q
PUBLIC	mulf
PUBLIC	AB
PUBLIC	Ad
PUBLIC	muli
PUBLIC	AG
PUBLIC	F
PUBLIC	modtds
PUBLIC	r
PUBLIC	Aa
PUBLIC	H
PUBLIC	Af
PUBLIC	G
PUBLIC	u
PUBLIC	divf
PUBLIC	S
PUBLIC	Ae
PUBLIC	modtis
PUBLIC	g
PUBLIC	Z
PUBLIC	AI
PUBLIC	mulds
PUBLIC	divi
PUBLIC	rdrandf
EXTRN	__imp_ExitProcess:PROC
EXTRN	__imp__time64:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_srand:PROC
EXTRN	__security_check_cookie:PROC
K	DQ	02H DUP (?)
COMM	x:DWORD
COMM	n:DWORD
j	DQ	02H DUP (?)
t	DQ	02H DUP (?)
J	DB	01H DUP (?)
COMM	b:DWORD
	ALIGN	8

AH	DB	020H DUP (?)
R	DB	010H DUP (?)
s	DB	01H DUP (?)
COMM	M:BYTE
	ALIGN	4

AA	DB	01H DUP (?)
	ALIGN	8

q	DB	010H DUP (?)
AC	DB	010H DUP (?)
e	DD	04H DUP (?)
Aj	DB	01H DUP (?)
	ALIGN	4

y	DB	01H DUP (?)
COMM	O:DWORD
COMM	X:DWORD
COMM	Y:DWORD
	ALIGN	4

AF	DB	01H DUP (?)
COMM	B:WORD
COMM	AJ:BYTE
	ALIGN	4

i	DB	01H DUP (?)
COMM	cpuInfo:DWORD:04H
	ALIGN	8

Ag	DQ	04H DUP (?)
p	DQ	02H DUP (?)
h	DB	010H DUP (?)
COMM	v:BYTE
COMM	L:BYTE
k	DQ	02H DUP (?)
V	DB	01H DUP (?)
	ALIGN	8

P	DQ	02H DUP (?)
COMM	W:BYTE
Ac	DB	010H DUP (?)
Ai	DB	010H DUP (?)
COMM	a:BYTE
U	DQ	02H DUP (?)
avx2	DB	01H DUP (?)
	ALIGN	4

z	DB	020H DUP (?)
COMM	l:BYTE
o	DB	01H DUP (?)
	ALIGN	8

I	DQ	04H DUP (?)
Ab	DB	010H DUP (?)
COMM	c:DWORD
f	DB	01H DUP (?)
COMM	C:DWORD
	ALIGN	8

Ah	DQ	04H DUP (?)
COMM	E:BYTE
Q	DB	010H DUP (?)
AB	DB	010H DUP (?)
Ad	DB	020H DUP (?)
AG	DQ	04H DUP (?)
F	DD	04H DUP (?)
COMM	w:BYTE
r	DB	010H DUP (?)
Aa	DB	010H DUP (?)
COMM	T:BYTE
H	DB	010H DUP (?)
Af	DB	01H DUP (?)
COMM	m:BYTE
	ALIGN	8

G	DB	010H DUP (?)
u	DQ	02H DUP (?)
S	DQ	02H DUP (?)
Ae	DB	01H DUP (?)
COMM	AE:BYTE
	ALIGN	8

g	DB	010H DUP (?)
COMM	A:BYTE
Z	DB	020H DUP (?)
AI	DB	010H DUP (?)
COMM	N:DWORD
rdrandf	DB	01H DUP (?)
_BSS	ENDS
modfff	DQ	6625252066372e25H
	DQ	203d2066372e2520H
	DQ	0000000a66372e25H
modfis	DQ	2520662525206425H
	DQ	00206425203d2064H
	DQ	0000000000000000H
modtf	DQ	7425252066372e25H
	DQ	203d2066372e2520H
	DQ	0000000a66372e25H
modfi	DQ	2520662525206425H
	DQ	000a6425203d2064H
	DQ	0000000000000000H
line	DW	0aH
	ORG $+6
modti	DQ	2520742525206425H
	DQ	000a6425203d2064H
	DQ	0000000000000000H
divlls	DQ	25202f20646c6c25H
	DQ	6c25203d20646c6cH
	DQ	000000000020646cH
mullls	DQ	25207820646c6c25H
	DQ	6c25203d20646c6cH
	DQ	000000000020646cH
divds	DQ	202f206635312e25H
	DQ	203d206635312e25H
	DQ	0000206635312e25H
modfds	DQ	2525206635312e25H
	DQ	206635312e252066H
	DQ	206635312e25203dH
	DQ	0000000000000000H
mulf	DQ	2520782066372e25H
	DQ	2e25203d2066372eH
	DQ	00000000000a6637H
muli	DQ	2064252078206425H
	DQ	0000000a6425203dH
modtds	DQ	2525206635312e25H
	DQ	206635312e252074H
	DQ	206635312e25203dH
	DQ	0000000000000000H
divf	DQ	25202f2066372e25H
	DQ	2e25203d2066372eH
	DQ	00000000000a6637H
modtis	DQ	2520742525206425H
	DQ	00206425203d2064H
	DQ	0000000000000000H
mulds	DQ	2078206635312e25H
	DQ	203d206635312e25H
	DQ	0000206635312e25H
divi	DQ	206425202f206425H
	DQ	0000000a6425203dH
_DATA	ENDS
PUBLIC	main
PUBLIC	printf
PUBLIC	_vfprintf_l
PUBLIC	__local_stdio_printf_options
EXTRN	__GSHandlerCheck:PROC
EXTRN	__vdecl_trunc2:PROC
EXTRN	floor:PROC
EXTRN	fmod:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN254
	DD	imagerel $LN254+2838
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$randd DD	imagerel randd
	DD	imagerel randd+52
	DD	imagerel $unwind$randd
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$randll DD imagerel randll
	DD	imagerel randll+48
	DD	imagerel $unwind$randll
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$randll DD imagerel randll+48
	DD	imagerel randll+181
	DD	imagerel $chain$2$randll
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$randll DD imagerel randll+181
	DD	imagerel randll+210
	DD	imagerel $chain$3$randll
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$randf DD	imagerel randf
	DD	imagerel randf+221
	DD	imagerel $unwind$randf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$randi DD	imagerel randi
	DD	imagerel randi+116
	DD	imagerel $unwind$randi
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$randc DD	imagerel randc
	DD	imagerel randc+34
	DD	imagerel $unwind$randc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6@printf
	DD	imagerel $LN6@printf+85
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4@vfprintf_l
	DD	imagerel $LN4@vfprintf_l+68
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DQ 00009640f00060f01r	; 1.30596e-308
	DQ	0700b520f0008340fr		; 5.30195e+231
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DQ 07017521b00041b01r		; 9.05146e+231
	DD	030156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$randc DQ 00000420400010401r		; 3.58617e-310
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$randi DQ 00008340a00041919r		; 1.14081e-308
	DD	07006520aH
	DD	imagerel __GSHandlerCheck
	DD	028H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$randf DQ 00009640f00061e19r		; 1.30596e-308
	DQ	0700b520f0008340fr		; 5.30195e+231
	DD	imagerel __GSHandlerCheck
	DD	028H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$randll DD 021H
	DD	imagerel randll
	DD	imagerel randll+48
	DD	imagerel $unwind$randll
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$randll DQ 0000a741200061221r		; 1.45372e-308
	DQ	0000834050009640ar		; 1.1408e-308
	DD	imagerel randll
	DD	imagerel randll+48
	DD	imagerel $unwind$randll
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$randll DQ 0000b540b00041a19r		; 1.57539e-308
	DD	0e007520bH
	DD	imagerel __GSHandlerCheck
	DD	028H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$randd DQ 00002680900030901r		; 3.34649e-309
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	0a2001H
	DD	027820H
	DD	036816H
	DD	0b640fH
	DD	0a340fH
	DD	0700b720fH
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT main
_TEXT	SEGMENT
main	PROC						; COMDAT
; File D:\Assembly Project\C\MultiplicativeC\Multiplicative.c
; Line 120
$LN254:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 64					; 00000040H
; Line 121
	xor	ecx, ecx
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	eax, 1
	movaps	XMMWORD PTR [rsp+32], xmm7
	cpuid
	mov	DWORD PTR cpuInfo, eax
	mov	DWORD PTR cpuInfo+4, ebx
	mov	DWORD PTR cpuInfo+8, ecx
	mov	DWORD PTR cpuInfo+12, edx
; Line 123
	bt	ecx, 30
	jae	SHORT $LN54@main
; Line 135
	mov	BYTE PTR rdrandf, 1
; Line 136
	jmp	SHORT $LN252@main
$LN54@main:
; Line 126
	xor	ecx, ecx
	mov	eax, 7
	cpuid
	mov	DWORD PTR cpuInfo, eax
	mov	DWORD PTR cpuInfo+4, ebx
	mov	DWORD PTR cpuInfo+8, ecx
	mov	DWORD PTR cpuInfo+12, edx
; Line 128
	test	bl, 32					; 00000020H
	je	SHORT $LN55@main
$LN252@main:
; Line 141
	mov	BYTE PTR avx2, 1
$LN55@main:
	call	time
	mov	rcx, rax
	call	QWORD PTR __imp_srand
; Line 143
	call	randc
	mov	BYTE PTR A, al
; Line 144
	call	randc
; Line 145
	movsx	r10d, BYTE PTR A
	movsx	ecx, al
; Line 147
	mov	edx, r10d
	imul	ecx, r10d
	movsx	r8d, al
	mov	BYTE PTR a, al
	mov	WORD PTR B, cx
	movsx	r9d, cx
	lea	rcx, OFFSET FLAT:muli
	call	printf
; Line 149
	call	randf
	movss	DWORD PTR b, xmm0
; Line 150
	call	randf
	movss	xmm4, DWORD PTR b
; Line 153
	lea	rcx, OFFSET FLAT:mulf
	movaps	xmm1, xmm0
	movss	DWORD PTR C, xmm0
	mulss	xmm1, xmm4
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	cvtss2sd xmm2, xmm0
	cvtss2sd xmm3, xmm1
	movss	DWORD PTR c, xmm1
	movq	r8, xmm2
	cvtps2pd xmm1, xmm4
	movq	r9, xmm3
	movq	rdx, xmm1
	call	printf
; Line 155
	mov	BYTE PTR E, 0
	lea	rdi, OFFSET FLAT:__ImageBase
$LL6@main:
; Line 157
	call	randi
	movsx	rcx, BYTE PTR E
	mov	DWORD PTR e[rdi+rcx*4], eax
; Line 158
	call	randi
	movsx	rdx, BYTE PTR E
	mov	DWORD PTR F[rdi+rdx*4], eax
	inc	dl
	mov	BYTE PTR E, dl
	cmp	dl, 3
	jle	SHORT $LL6@main
; Line 160
	movsx	rdx, BYTE PTR f
	cmp	dl, 2
	jg	$LN75@main
	movaps	xmm5, XMMWORD PTR H
	lea	r8, QWORD PTR I[rdi]
	movaps	xmm3, XMMWORD PTR g
	lea	r8, QWORD PTR [r8+rdx*8]
	movaps	xmm2, XMMWORD PTR G
	lea	rbx, QWORD PTR [rdx*4]
$LL7@main:
; Line 162
	cvtsi2sd xmm2, DWORD PTR e[rbx+rdi]
	movsx	rcx, dl
; Line 166
	lea	rbx, QWORD PTR [rbx+8]
	lea	r8, QWORD PTR [r8+16]
	add	dl, 2
	movaps	xmm1, xmm5
	cvtsi2sd xmm0, DWORD PTR e[rdi+rcx*4+4]
	cvtsi2sd xmm1, DWORD PTR F[rbx+rdi-8]
	movlhps	xmm2, xmm0
	cvtsi2sd xmm0, DWORD PTR F[rdi+rcx*4+4]
	movlhps	xmm1, xmm0
	movaps	xmm0, xmm3
	mulpd	xmm2, xmm1
	movhlps	xmm0, xmm2
	cvtsd2si rax, xmm2
	mov	QWORD PTR [r8-16], rax
	cvtsd2si rax, xmm0
	mov	QWORD PTR I[rdi+rcx*8+8], rax
	cmp	dl, 2
	jle	SHORT $LL7@main
	movaps	XMMWORD PTR G, xmm2
	mov	BYTE PTR f, dl
$LN75@main:
; Line 169
	movzx	eax, BYTE PTR i
	cmp	al, 3
	jg	SHORT $LN57@main
	npad	7
$l1$255:
; Line 171
	movsx	rdx, al
	lea	rcx, OFFSET FLAT:mullls
	mov	r9, QWORD PTR I[rdi+rdx*8]
	mov	r8d, DWORD PTR F[rdi+rdx*4]
	mov	edx, DWORD PTR e[rdi+rdx*4]
	call	printf
; Line 173
	movzx	eax, BYTE PTR i
	inc	al
	mov	BYTE PTR i, al
	cmp	al, 3
	jle	SHORT $l1$255
$LN57@main:
; Line 178
	lea	rcx, OFFSET FLAT:line
	call	printf
$LL11@main:
; Line 182
	call	randd
	movsx	rax, BYTE PTR J
	movsd	QWORD PTR j[rdi+rax*8], xmm0
; Line 183
	call	randd
	movsx	rcx, BYTE PTR J
	movsd	QWORD PTR K[rdi+rcx*8], xmm0
; Line 185
	inc	cl
	mov	BYTE PTR J, cl
	cmp	cl, 1
; Line 187
	jle	SHORT $LL11@main
; Line 189
	movaps	xmm0, XMMWORD PTR j
	mulpd	xmm0, XMMWORD PTR K
; Line 191
	movzx	eax, BYTE PTR L
	movaps	XMMWORD PTR k, xmm0
	cmp	al, 1
	jg	SHORT $LN13@main
$LL12@main:
; Line 193
	movsx	rax, al
	lea	rcx, OFFSET FLAT:mulds
	movsd	xmm3, QWORD PTR k[rdi+rax*8]
	movsd	xmm2, QWORD PTR K[rdi+rax*8]
	movq	r9, xmm3
	movsd	xmm1, QWORD PTR j[rdi+rax*8]
	movq	r8, xmm2
	movq	rdx, xmm1
	call	printf
; Line 195
	movzx	eax, BYTE PTR L
	inc	al
	mov	BYTE PTR L, al
	cmp	al, 1
	jle	SHORT $LL12@main
$LN13@main:
; Line 198
	lea	rcx, OFFSET FLAT:line
	call	printf
; Line 200
	call	randc
	movzx	edx, BYTE PTR M
	mov	BYTE PTR l, al
	npad	5
$l2$256:
; Line 202
	xor	ecx, ecx
	test	dl, dl
	sete	cl
	cmp	ecx, 1
	jne	SHORT $LN202@main
; Line 205
	call	randc
	movzx	edx, al
	mov	BYTE PTR M, al
; Line 207
	jmp	SHORT $l2$256
$LN202@main:
; Line 210
	movsx	ecx, BYTE PTR l
	movsx	r8d, dl
	mov	eax, ecx
	cdq
	idiv	r8d
; Line 212
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:divi
	movsx	r9d, al
	mov	BYTE PTR m, al
	call	printf
; Line 214
	call	randf
	movss	DWORD PTR N, xmm0
; Line 215
	call	randf
	movss	xmm4, DWORD PTR N
; Line 218
	lea	rcx, OFFSET FLAT:divf
	movaps	xmm1, xmm4
	movss	DWORD PTR n, xmm0
	divss	xmm1, xmm0
	xorps	xmm2, xmm2
	cvtps2pd xmm3, xmm1
	movss	DWORD PTR O, xmm1
	cvtps2pd xmm1, xmm4
	cvtss2sd xmm2, xmm0
	movq	rdx, xmm1
	movq	r9, xmm3
	movq	r8, xmm2
	call	printf
	movzx	edx, BYTE PTR o
$LL18@main:
; Line 222
	movsx	rbx, dl
	call	randll
; Line 224
	cmp	QWORD PTR p[rdi+rbx*8], 0
	mov	QWORD PTR P[rdi+rbx*8], rax
	jne	SHORT $LN211@main
$LL21@main:
; Line 226
	call	randll
	movsx	rdx, BYTE PTR o
	mov	QWORD PTR p[rdi+rdx*8], rax
	test	rax, rax
	je	SHORT $LL21@main
; Line 224
	jmp	SHORT $LN20@main
$LN211@main:
	movzx	edx, BYTE PTR o
$LN20@main:
; Line 229
	inc	dl
	mov	BYTE PTR o, dl
	cmp	dl, 1
; Line 231
	jle	SHORT $LL18@main
; Line 233
	movaps	xmm3, XMMWORD PTR Q
	movaps	xmm1, XMMWORD PTR R
	cvtsi2sd xmm0, QWORD PTR P+8
	cvtsi2sd xmm3, QWORD PTR P
	cvtsi2sd xmm1, QWORD PTR p
	movaps	xmm2, XMMWORD PTR q
	movlhps	xmm3, xmm0
	cvtsi2sd xmm0, QWORD PTR p+8
	movlhps	xmm1, xmm0
	divpd	xmm3, xmm1
; Line 234
	cvtsd2si rax, xmm3
; Line 235
	movhlps	xmm2, xmm3
	mov	QWORD PTR S, rax
	cvtsd2si rax, xmm2
	movaps	XMMWORD PTR Q, xmm3
	mov	QWORD PTR S+8, rax
; Line 237
	movzx	eax, BYTE PTR s
	cmp	al, 1
	jg	SHORT $LN23@main
$LL22@main:
; Line 239
	movsx	rdx, al
	lea	rcx, OFFSET FLAT:divlls
	mov	r9, QWORD PTR S[rdi+rdx*8]
	mov	r8, QWORD PTR p[rdi+rdx*8]
	mov	rdx, QWORD PTR P[rdi+rdx*8]
	call	printf
; Line 241
	movzx	eax, BYTE PTR s
	inc	al
	mov	BYTE PTR s, al
	cmp	al, 1
	jle	SHORT $LL22@main
$LN23@main:
; Line 244
	lea	rcx, OFFSET FLAT:line
	call	printf
; Line 246
	cmp	BYTE PTR T, 1
	jg	SHORT $LN59@main
$l3$257:
; Line 248
	call	randd
	movsx	rax, BYTE PTR T
	movsd	QWORD PTR t[rdi+rax*8], xmm0
; Line 249
	call	randd
	movsx	rcx, BYTE PTR T
	movsd	QWORD PTR U[rdi+rcx*8], xmm0
; Line 251
	inc	cl
	mov	BYTE PTR T, cl
	cmp	cl, 1
	jle	SHORT $l3$257
$LN59@main:
; Line 256
	movaps	xmm0, XMMWORD PTR t
	divpd	xmm0, XMMWORD PTR U
	movzx	eax, BYTE PTR V
	movaps	XMMWORD PTR u, xmm0
	npad	9
$LL26@main:
; Line 260
	movsx	rax, al
	lea	rcx, OFFSET FLAT:divds
	movsd	xmm3, QWORD PTR u[rdi+rax*8]
	movsd	xmm2, QWORD PTR U[rdi+rax*8]
	movq	r9, xmm3
	movsd	xmm1, QWORD PTR t[rdi+rax*8]
	movq	r8, xmm2
	movq	rdx, xmm1
	call	printf
; Line 262
	movzx	eax, BYTE PTR V
	inc	al
	mov	BYTE PTR V, al
	cmp	al, 1
; Line 264
	jle	SHORT $LL26@main
; Line 266
	lea	rcx, OFFSET FLAT:line
	call	printf
; Line 268
	call	randc
; Line 269
	movzx	ecx, BYTE PTR W
	mov	BYTE PTR v, al
	test	cl, cl
	jne	SHORT $LN28@main
	npad	1
$LL29@main:
; Line 271
	call	randc
	mov	BYTE PTR W, al
	movzx	ecx, al
	test	al, al
	je	SHORT $LL29@main
	movzx	eax, BYTE PTR v
$LN28@main:
; Line 274
	movsx	ebx, al
	mov	eax, ebx
	movsx	r8d, cl
	cdq
	idiv	r8d
	mov	BYTE PTR w, dl
	test	dl, dl
; Line 276
	jns	SHORT $LN253@main
	test	cl, cl
	jg	SHORT $LN60@main
	test	dl, dl
$LN253@main:
	jle	SHORT $LN30@main
	test	cl, cl
	jns	SHORT $LN30@main
$LN60@main:
; Line 279
	add	dl, cl
	mov	BYTE PTR w, dl
$LN30@main:
; Line 282
	movsx	r9d, dl
	lea	rcx, OFFSET FLAT:modfi
	mov	edx, ebx
	call	printf
; Line 284
	movsx	ecx, BYTE PTR v
	movsx	r8d, BYTE PTR W
	mov	eax, ecx
	cdq
	idiv	r8d
	mov	BYTE PTR w, dl
	movsx	r9d, dl
; Line 286
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:modti
	call	printf
; Line 288
	call	randf
	movss	DWORD PTR X, xmm0
; Line 289
	call	randf
	movss	xmm6, DWORD PTR X
	movaps	xmm7, xmm0
	movaps	xmm1, xmm6
	movss	DWORD PTR x, xmm7
	divss	xmm1, xmm7
; Line 290
	cvtps2pd xmm0, xmm1
	call	floor
	xorps	xmm1, xmm1
; Line 292
	lea	rcx, OFFSET FLAT:modfff
	movaps	xmm2, xmm6
	cvtsd2ss xmm1, xmm0
	mulss	xmm1, xmm7
	subss	xmm2, xmm1
	cvtps2pd xmm1, xmm6
	cvtps2pd xmm3, xmm2
	movss	DWORD PTR Y, xmm2
	movq	rdx, xmm1
	xorps	xmm2, xmm2
	movq	r9, xmm3
	cvtss2sd xmm2, xmm7
	movq	r8, xmm2
	call	printf
	movss	xmm7, DWORD PTR X
	movss	xmm6, DWORD PTR x
; Line 294
	cvtps2pd xmm7, xmm7
	cvtps2pd xmm6, xmm6
	movaps	xmm0, xmm7
	movaps	xmm1, xmm6
	call	fmod
	xorps	xmm3, xmm3
; Line 296
	lea	rcx, OFFSET FLAT:modtf
	cvtsd2ss xmm3, xmm0
	movaps	xmm2, xmm6
	movq	r8, xmm6
	movss	DWORD PTR Y, xmm3
	movaps	xmm1, xmm7
	cvtps2pd xmm3, xmm3
	movq	rdx, xmm7
	movq	r9, xmm3
	call	printf
; Line 298
	cmp	BYTE PTR y, 31
	jg	SHORT $LN204@main
$LL32@main:
; Line 300
	call	randc
	movsx	rdx, BYTE PTR y
	mov	BYTE PTR Z[rdx+rdi], al
; Line 309
	inc	dl
	mov	BYTE PTR y, dl
	cmp	dl, 31
	jle	SHORT $LL32@main
$LN204@main:
	movaps	xmm2, XMMWORD PTR Aa
	lea	rsi, OFFSET FLAT:Ad
	movzx	ebx, BYTE PTR AA
	movaps	xmm1, XMMWORD PTR Ab
$LL36@main:
; Line 313
	movsx	rcx, bl
	movsx	rdx, bl
; Line 322
	add	bl, 2
	movsx	eax, BYTE PTR Z[rcx+rdi]
	cvtsi2sd xmm2, eax
	movsx	eax, BYTE PTR Z[rdx+rdi+1]
	cvtsi2sd xmm3, eax
	movsx	eax, BYTE PTR z[rcx+rdi]
	cvtsi2sd xmm1, eax
	movsx	eax, BYTE PTR z[rdx+rdi+1]
	movlhps	xmm2, xmm3
	movaps	xmm0, xmm2
	cvtsi2sd xmm4, eax
	movlhps	xmm1, xmm4
	divpd	xmm0, xmm1
	cvtsd2si eax, xmm1
	movaps	XMMWORD PTR Ac, xmm0
	movaps	xmm0, xmm2
	mov	BYTE PTR [rcx+rsi], al
	movhlps	xmm0, xmm1
	cvtsd2si eax, xmm0
	mov	BYTE PTR [rdx+rsi+1], al
	cmp	bl, 30
; Line 324
	jle	SHORT $LL36@main
; Line 314
	xor	al, al
	movaps	XMMWORD PTR Ab, xmm1
; Line 326
	xor	cl, cl
	movaps	XMMWORD PTR Aa, xmm2
	movaps	XMMWORD PTR AB, xmm2
	movaps	XMMWORD PTR AC, xmm1
	mov	BYTE PTR AA, bl
	mov	BYTE PTR AE, 0
	npad	7
$LL39@main:
; Line 328
	movsx	rcx, cl
	movsx	rax, al
	movsx	r8d, BYTE PTR z[rcx+rdi]
	movsx	edx, BYTE PTR Z[rcx+rdi]
	lea	rcx, OFFSET FLAT:modfis
	movsx	r9d, BYTE PTR [rax+rsi]
	call	printf
	movzx	eax, BYTE PTR AE
	add	al, 2
	mov	BYTE PTR AE, al
	movzx	ecx, al
	cmp	al, 31
	jle	SHORT $LL39@main
; Line 333
	lea	rcx, OFFSET FLAT:line
	call	printf
; Line 335
	movsx	rcx, BYTE PTR Ae
	cmp	cl, 30
	jg	SHORT $LN207@main
; Line 333
	movaps	xmm1, XMMWORD PTR AC
	lea	rdx, QWORD PTR [rsi+rcx]
	movaps	xmm0, XMMWORD PTR AB
	movhlps	xmm0, xmm1
	cvtsd2si r8d, xmm0
	cvtsd2si ebx, xmm1
	npad	9
$LL40@main:
; Line 339
	movsx	rax, cl
; Line 341
	inc	cl
	mov	BYTE PTR [rdx], bl
	lea	rdx, QWORD PTR [rdx+1]
	mov	BYTE PTR [rax+rsi+1], r8b
	cmp	cl, 30
	jle	SHORT $LL40@main
	mov	BYTE PTR Ae, cl
$LN207@main:
	movzx	edx, BYTE PTR AF
$l5$258:
; Line 344
	xor	ecx, ecx
	cmp	dl, 31
	setle	cl
	cmp	ecx, 1
	jne	SHORT $LN203@main
; Line 347
	movsx	rax, dl
	lea	rcx, OFFSET FLAT:modtis
	movsx	r9d, BYTE PTR [rax+rsi]
	movsx	r8d, BYTE PTR z[rax+rdi]
	movsx	edx, BYTE PTR Z[rax+rdi]
	call	printf
; Line 349
	movzx	edx, BYTE PTR AF
	inc	dl
	mov	BYTE PTR AF, dl
; Line 351
	jmp	SHORT $l5$258
$LN203@main:
; Line 354
	lea	rcx, OFFSET FLAT:line
	call	printf
$LL46@main:
; Line 358
	call	randd
	movsx	rax, BYTE PTR Af
	movsd	QWORD PTR AG[rdi+rax*8], xmm0
; Line 359
	call	randd
	movsx	rcx, BYTE PTR Af
	movsd	QWORD PTR Ag[rdi+rcx*8], xmm0
; Line 361
	inc	cl
	mov	BYTE PTR Af, cl
	cmp	cl, 3
; Line 363
	jle	SHORT $LL46@main
; Line 365
	cmp	BYTE PTR avx2, 0
	je	SHORT $LN63@main
; Line 367
	vmovupd	ymm2, YMMWORD PTR AG
	vdivpd	ymm0, ymm2, YMMWORD PTR Ag
	vmovupd	YMMWORD PTR AH, ymm0
; Line 369
	vroundpd ymm0, ymm0, 1
	vmulpd	ymm1, ymm0, YMMWORD PTR Ag
	vsubpd	ymm2, ymm2, ymm1
	vmovapd	YMMWORD PTR Ah, ymm2
	vzeroupper
; Line 370
	jmp	SHORT $LN64@main
$LN63@main:
; Line 373
	movaps	xmm4, XMMWORD PTR AG
; Line 374
	movaps	xmm5, XMMWORD PTR AG+16
	movaps	xmm0, xmm4
	divpd	xmm0, XMMWORD PTR Ag
	movaps	xmm2, xmm5
	divpd	xmm2, XMMWORD PTR Ag+16
	movaps	XMMWORD PTR AI, xmm0
; Line 376
	roundpd	xmm0, xmm0, 1
	mulpd	xmm0, XMMWORD PTR Ag
	movaps	XMMWORD PTR Ai, xmm2
	subpd	xmm4, xmm0
; Line 377
	roundpd	xmm0, xmm2, 1
	mulpd	xmm0, XMMWORD PTR Ag+16
	movaps	XMMWORD PTR Ah, xmm4
	subpd	xmm5, xmm0
	movaps	XMMWORD PTR Ah+16, xmm5
$LN64@main:
; Line 380
	xor	al, al
	mov	BYTE PTR AJ, 0
	xor	cl, cl
	npad	5
$LL49@main:
; Line 382
	movsx	rcx, cl
	movsx	rax, al
	movsd	xmm2, QWORD PTR Ag[rdi+rcx*8]
	movsd	xmm1, QWORD PTR AG[rdi+rcx*8]
	movq	r8, xmm2
	movsd	xmm3, QWORD PTR Ah[rdi+rax*8]
	lea	rcx, OFFSET FLAT:modfds
	movq	r9, xmm3
	movq	rdx, xmm1
	call	printf
	movzx	eax, BYTE PTR AJ
	inc	al
	mov	BYTE PTR AJ, al
	movzx	ecx, al
	cmp	al, 3
	jle	SHORT $LL49@main
; Line 385
	lea	rcx, OFFSET FLAT:line
	call	printf
; Line 387
	cmp	BYTE PTR avx2, 1
	je	SHORT $LN65@main
; Line 394
	movaps	xmm0, XMMWORD PTR AI
	call	__vdecl_trunc2
	mulpd	xmm0, XMMWORD PTR Ag
	movaps	xmm1, XMMWORD PTR AG
	subpd	xmm1, xmm0
; Line 395
	movaps	xmm0, XMMWORD PTR Ai
	movaps	XMMWORD PTR Ah, xmm1
	call	__vdecl_trunc2
	mulpd	xmm0, XMMWORD PTR Ag+16
	movaps	xmm1, XMMWORD PTR AG+16
	subpd	xmm1, xmm0
	movaps	XMMWORD PTR Ah+16, xmm1
	jmp	SHORT $LN93@main
$LN65@main:
; Line 390
	vroundpd ymm0, YMMWORD PTR AH, 3
	vmulpd	ymm1, ymm0, YMMWORD PTR Ag
	vmovupd	ymm0, YMMWORD PTR AG
	vsubpd	ymm1, ymm0, ymm1
	vmovapd	YMMWORD PTR Ah, ymm1
	vzeroupper
$LN93@main:
; Line 400
	cmp	BYTE PTR Aj, 3
	jg	SHORT $LN53@main
	npad	7
$LL52@main:
; Line 402
	movsx	rax, BYTE PTR AJ
	lea	rcx, OFFSET FLAT:modtds
	movsd	xmm3, QWORD PTR Ah[rdi+rax*8]
	movsd	xmm2, QWORD PTR Ag[rdi+rax*8]
	movq	r9, xmm3
	movsd	xmm1, QWORD PTR AG[rdi+rax*8]
	movq	r8, xmm2
	movq	rdx, xmm1
	call	printf
; Line 404
	movzx	eax, BYTE PTR Aj
	inc	al
	mov	BYTE PTR Aj, al
	cmp	al, 3
	jle	SHORT $LL52@main
$LN53@main:
; Line 407
	lea	rcx, OFFSET FLAT:line
	call	printf
; Line 409
	xor	ecx, ecx
	call	QWORD PTR __imp_ExitProcess
	int	3
$LN251@main:
main	ENDP
_TEXT	ENDS
END
