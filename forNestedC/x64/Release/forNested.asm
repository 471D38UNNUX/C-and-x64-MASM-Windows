; Listing generated by Microsoft (R) Optimizing Compiler Version 19.42.34435.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	fprintfd
PUBLIC	line
PUBLIC	a
EXTRN	__imp_GetProcessHeap:PROC
EXTRN	__imp_ExitProcess:PROC
EXTRN	__imp_HeapAlloc:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_HeapFree:PROC
EXTRN	__security_check_cookie:PROC
COMM	b:BYTE
a	DB	01H DUP (?)
COMM	A:QWORD
_DATA	ENDS
fprintfd DQ	00000066312e3425H
line	DW	0aH
_DATA	ENDS
PUBLIC	main
PUBLIC	printf
PUBLIC	_vfprintf_l
PUBLIC	__local_stdio_printf_options
PUBLIC	__real@3fb999999999999a
EXTRN	_fltused:DWORD
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN29
	DD	imagerel $LN29+57
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$main DD imagerel $LN29+57
	DD	imagerel $LN29+266
	DD	imagerel $chain$1$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$main DD imagerel $LN29+266
	DD	imagerel $LN29+278
	DD	imagerel $chain$2$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6
	DD	imagerel $LN6+85
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4
	DD	imagerel $LN4+68
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 041b01H
	DD	07017521bH
	DD	030156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$main DD 021H
	DD	imagerel $LN29
	DD	imagerel $LN29+57
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$main DD 040f21H
	DD	02680fH
	DD	063405H
	DD	imagerel $LN29
	DD	imagerel $LN29+57
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	010401H
	DD	06204H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$dead$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
; Line 644
$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, rdx
	mov	rsi, rcx
; Line 645
	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rbx
	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf
; Line 646
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT printf
_TEXT	SEGMENT
_Format$ = 80
printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
; Line 956
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx
; Line 959
	lea	rsi, QWORD PTR _Format$[rsp+8]
; Line 960
	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	rbx, rax
; Line 645
	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rsi
	mov	r8, rdi
	mov	rdx, rbx
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf
; Line 963
	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT main
_TEXT	SEGMENT
main	PROC						; COMDAT
; File D:\Assembly Project\C\forNestedC\forNested.c
; Line 10
$LN29:
	sub	rsp, 56					; 00000038H
; Line 11
	call	QWORD PTR __imp_GetProcessHeap
	mov	edx, 8
	mov	r8d, 128				; 00000080H
	mov	rcx, rax
	call	QWORD PTR __imp_HeapAlloc
; Line 12
	xor	ecx, ecx
	mov	QWORD PTR A, rax
	test	rax, rax
	mov	rdx, rax
	sete	cl
	cmp	ecx, 1
	je	$LN10@main
	mov	QWORD PTR [rsp+48], rbx
; Line 18
	mov	ebx, 4
	movaps	XMMWORD PTR [rsp+32], xmm6
	movsd	xmm6, QWORD PTR __real@3fb999999999999a
$LL6@main:
; Line 20
	movzx	ecx, BYTE PTR a
	mov	BYTE PTR b, 0
	npad	2
$LL9@main:
; Line 22
	movsx	rax, cl
	lea	rcx, OFFSET FLAT:fprintfd
	movsd	xmm1, QWORD PTR [rdx+rax*8]
	movq	rdx, xmm1
	call	printf
; Line 24
	movzx	ecx, BYTE PTR a
; Line 25
	mov	rdx, QWORD PTR A
	inc	cl
	movsx	eax, cl
	mov	BYTE PTR a, cl
	movd	xmm0, eax
	movsx	rax, cl
	cvtdq2pd xmm0, xmm0
	mulsd	xmm0, xmm6
	movsd	QWORD PTR [rdx+rax*8], xmm0
	movzx	eax, BYTE PTR b
	inc	al
	mov	BYTE PTR b, al
	cmp	al, 3
	jle	SHORT $LL9@main
; Line 29
	lea	rcx, OFFSET FLAT:line
	mov	BYTE PTR b, 0
	call	printf
	sub	rbx, 1
	je	SHORT $LN24@main
; Line 18
	mov	rdx, QWORD PTR A
	jmp	$LL6@main
$LN24@main:
; Line 32
	call	QWORD PTR __imp_GetProcessHeap
	mov	r8, QWORD PTR A
	xor	edx, edx
	mov	rcx, rax
	call	QWORD PTR __imp_HeapFree
; Line 34
	xor	ecx, ecx
	call	QWORD PTR __imp_ExitProcess
	movaps	xmm6, XMMWORD PTR [rsp+32]
	mov	rbx, QWORD PTR [rsp+48]
$LN10@main:
; Line 15
	mov	ecx, 1
	call	QWORD PTR __imp_ExitProcess
	int	3
$LN28@main:
main	ENDP
_TEXT	ENDS
END
